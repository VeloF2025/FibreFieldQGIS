rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Photo uploads organized by capture type and user
    match /photos/{captureType}/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.size < 10 * 1024 * 1024 && // 10MB max
        request.resource.contentType.matches('image/.*') &&
        captureType in ['pole', 'home_drop', 'before', 'after', 'progress'];
    }
    
    // Photo uploads with capture ID organization
    match /captures/{captureId}/photos/{photoType}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        request.resource.size < 10 * 1024 * 1024 && // 10MB max
        request.resource.contentType.matches('image/.*') &&
        (isOwnerOfCapture(captureId) || hasAdminRole());
    }
    
    // Compressed/thumbnail photos
    match /photos/compressed/{captureType}/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.size < 2 * 1024 * 1024 && // 2MB max for compressed
        request.resource.contentType.matches('image/.*');
    }
    
    // Documents and exports - admin/manager access
    match /documents/{documentType}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        hasAdminOrManagerRole() &&
        (request.resource.contentType.matches('application/pdf') ||
         request.resource.contentType.matches('application/.*spreadsheet.*') ||
         request.resource.contentType.matches('text/csv') ||
         request.resource.contentType.matches('application/json'));
    }
    
    // QGIS exports and GeoPackage files
    match /exports/{exportType}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        hasAdminOrManagerRole() &&
        (fileName.matches('.*\\.gpkg$') ||
         fileName.matches('.*\\.geojson$') ||
         fileName.matches('.*\\.csv$') ||
         fileName.matches('.*\\.xlsx?$'));
    }
    
    // User profile photos
    match /profiles/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.size < 5 * 1024 * 1024 && // 5MB max
        request.resource.contentType.matches('image/.*');
    }
    
    // Backup and archive files - admin only
    match /backups/{allPaths=**} {
      allow read, write: if request.auth != null && hasAdminRole();
    }
    
    // Temporary upload storage - 24hr auto-delete
    match /temp/{userId}/{fileName} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.size < 50 * 1024 * 1024; // 50MB max for temp files
    }
    
    // Helper function to check if user owns the capture
    function isOwnerOfCapture(captureId) {
      return request.auth != null && 
        (getCaptureData('pole_captures', captureId).capturedBy == request.auth.uid ||
         getCaptureData('home_drop_captures', captureId).capturedBy == request.auth.uid);
    }
    
    // Helper function to get capture data from Firestore
    function getCaptureData(collection, captureId) {
      return firestore.get(/databases/(default)/documents/$(collection)/$(captureId)).data;
    }
    
    // Helper function to check admin role
    function hasAdminRole() {
      return request.auth != null && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check admin or manager role
    function hasAdminOrManagerRole() {
      let userData = firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data;
      return request.auth != null && 
        (userData.role == 'admin' || userData.role == 'manager');
    }
    
    // Helper function to check if user is active
    function isActiveUser() {
      return request.auth != null && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
  }
}